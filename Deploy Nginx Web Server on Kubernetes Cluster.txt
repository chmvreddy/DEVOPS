Some of the Nautilus team developers are developing a static website and they want to deploy it on Kubernetes cluster. They want it to be highly available and scalable. Therefore, based on the requirements, the DevOps team has decided to create deployment for it with multiple replicas. Below you can find more details about it:


1. Create a deployment using nginx image with latest tag only and remember to mention tag i.e nginx:latest and name it as nginx-deployment. App labels should be app: nginx-app and type: front-end. The container should be named as nginx-container; also make sure replica counts are 3.

2. Also create a service named nginx-service and type NodePort. The targetPort should be 80 and nodePort should be 30011.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.


   1  sudo vi nginx-deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx-app
  replicas: 3 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx-app
        type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx:latest
        ports:
        - containerPort: 80
    2  kubectl apply -f nginx-deployment.yaml
deployment.apps/nginx-deployment created
    4  kubectl get pods -l app=nginx-app
NAME                                READY   STATUS    RESTARTS   AGE
nginx-deployment-6f69b9b6db-4bzx9   1/1     Running   0          7m45s
nginx-deployment-6f69b9b6db-q6n6f   1/1     Running   0          7m45snginx-deployment-6f69b9b6db-qzvmh   1/1     Running   0          7m45s
    5  sudo vi nginx-deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx-app
  replicas: 3 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx-app
        type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx:latest
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort
  selector:
    app: nginx-app
    type: front-end
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30011
    6  kubectl apply -f nginx-deployment.yaml
deployment.apps/nginx-deployment unchanged
service/nginx-service created
    7  kubectl get service
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP        103m
nginx-service   NodePort    10.110.64.182   <none>        80:30011/TCP   41s
    8  curl 172.17.0.24:30011
    9  curl jump_host.stratos.xfusioncorp.com:30011
   10  kubectl get pods -o wide
NAME                                READY   STATUS    RESTARTS   AGE   IP          NODE     NOMINATED NODE   READINESS GATES
nginx-deployment-6f69b9b6db-4bzx9   1/1     Running   0          16m   10.44.0.1   node01   <none>           <none>
nginx-deployment-6f69b9b6db-q6n6f   1/1     Running   0          16m   10.44.0.2   node01   <none>           <none>
nginx-deployment-6f69b9b6db-qzvmh   1/1     Running   0          16m   10.44.0.3   node01   <none>           <none>
   12  kubectl get service nginx-service --output yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"nginx-service","namespace":"default"},"spec":{"ports":[{"nodePort":30011,"port":80,"targetPort":80}],"selector":{"app":"nginx-app","type":"front-end"},"type":"NodePort"}}
  creationTimestamp: "2020-11-05T10:55:02Z"
  name: nginx-service
  namespace: default
  resourceVersion: "8780"
  selfLink: /api/v1/namespaces/default/services/nginx-service
  uid: 65da164d-11d2-4634-bdd7-a9cea8f824e9
spec:
  clusterIP: 10.110.64.182
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30011
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx-app
    type: front-end
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}

   13   kubectl describe service nginx-service   
Name:                     nginx-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=nginx-app,type=front-end
Type:                     NodePort
IP:                       10.110.64.182
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  30011/TCP
Endpoints:                10.44.0.1:80,10.44.0.2:80,10.44.0.3:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>                                                    --THIS SHOW THE SERVICE OUTPU